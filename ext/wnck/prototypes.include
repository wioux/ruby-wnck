VALUE rwnck_screen_active_window(VALUE self);
VALUE rwnck_screen_previously_active_window(VALUE self);
VALUE rwnck_screen_windows(VALUE self);
VALUE rwnck_screen_windows_stacked(VALUE self);
VALUE rwnck_screen_number(VALUE self);
VALUE rwnck_screen_width(VALUE self);
VALUE rwnck_screen_height(VALUE self);
VALUE rwnck_screen_window_manager_name(VALUE self);
VALUE rwnck_screen_background_pixmap(VALUE self);
VALUE rwnck_screen_showing_desktop_p(VALUE self);
VALUE rwnck_screen_force_update(VALUE self);
void wnck_callback_screen_window(WnckScreen *screen0, WnckWindow *window1, gpointer *rb_proc) ;
void wnck_callback_screen_workspace(WnckScreen *screen0, WnckWorkspace *workspace1, gpointer *rb_proc) ;
void wnck_callback_screen_application(WnckScreen *screen0, WnckApplication *application1, gpointer *rb_proc) ;
void wnck_callback_screen(WnckScreen *screen0, gpointer *rb_proc) ;
void wnck_callback_screen_classgroup(WnckScreen *screen0, WnckClassGroup *classgroup1, gpointer *rb_proc) ;
VALUE rwnck_window_screen(VALUE self);
VALUE rwnck_window_class_group(VALUE self);
VALUE rwnck_window_application(VALUE self);
VALUE rwnck_window_has_name_p(VALUE self);
VALUE rwnck_window_name(VALUE self);
VALUE rwnck_window_has_icon_name_p(VALUE self);
VALUE rwnck_window_icon_name(VALUE self);
VALUE rwnck_window_icon_is_fallback_p(VALUE self);
VALUE rwnck_window_group_leader(VALUE self);
VALUE rwnck_window_xid(VALUE self);
VALUE rwnck_window_pid(VALUE self);
VALUE rwnck_window_type(VALUE self);
VALUE rwnck_window_state(VALUE self);
VALUE rwnck_window_minimized_p(VALUE self);
VALUE rwnck_window_maximized_horizontally_p(VALUE self);
VALUE rwnck_window_maximized_vertically_p(VALUE self);
VALUE rwnck_window_maximized_p(VALUE self);
VALUE rwnck_window_shaded_p(VALUE self);
VALUE rwnck_window_pinned_p(VALUE self);
VALUE rwnck_window_sticky_p(VALUE self);
VALUE rwnck_window_above_p(VALUE self);
VALUE rwnck_window_below_p(VALUE self);
VALUE rwnck_window_skip_pager_p(VALUE self);
VALUE rwnck_window_skip_tasklist_p(VALUE self);
VALUE rwnck_window_fullscreen_p(VALUE self);
VALUE rwnck_window_needs_attention_p(VALUE self);
VALUE rwnck_window_or_transient_needs_attention_p(VALUE self);
VALUE rwnck_window_actions(VALUE self);
VALUE rwnck_window_minimize(VALUE self);
VALUE rwnck_window_maximize_horizontally(VALUE self);
VALUE rwnck_window_unmaximize_horizontally(VALUE self);
VALUE rwnck_window_maximize_vertically(VALUE self);
VALUE rwnck_window_unmaximize_vertically(VALUE self);
VALUE rwnck_window_maximize(VALUE self);
VALUE rwnck_window_unmaximize(VALUE self);
VALUE rwnck_window_shade(VALUE self);
VALUE rwnck_window_unshade(VALUE self);
VALUE rwnck_window_pin(VALUE self);
VALUE rwnck_window_unpin(VALUE self);
VALUE rwnck_window_stick(VALUE self);
VALUE rwnck_window_unstick(VALUE self);
VALUE rwnck_window_make_above(VALUE self);
VALUE rwnck_window_unmake_above(VALUE self);
VALUE rwnck_window_make_below(VALUE self);
VALUE rwnck_window_unmake_below(VALUE self);
VALUE rwnck_window_active_p(VALUE self);
VALUE rwnck_window_most_recently_activated_p(VALUE self);
VALUE rwnck_window_keyboard_move(VALUE self);
VALUE rwnck_window_keyboard_size(VALUE self);
void wnck_callback_window(WnckWindow *window0, gpointer *rb_proc) ;
VALUE rwnck_class_group_windows(VALUE self);
VALUE rwnck_class_group_name(VALUE self);
VALUE rwnck_class_group_res_class(VALUE self);
void wnck_callback_classgroup(WnckClassGroup *classgroup0, gpointer *rb_proc) ;
VALUE rwnck_workspace_screen(VALUE self);
VALUE rwnck_workspace_number(VALUE self);
VALUE rwnck_workspace_name(VALUE self);
VALUE rwnck_workspace_width(VALUE self);
VALUE rwnck_workspace_height(VALUE self);
VALUE rwnck_workspace_viewport_x(VALUE self);
VALUE rwnck_workspace_viewport_y(VALUE self);
VALUE rwnck_workspace_virtual_p(VALUE self);
VALUE rwnck_workspace_layout_row(VALUE self);
VALUE rwnck_workspace_layout_column(VALUE self);
void wnck_callback_workspace(WnckWorkspace *workspace0, gpointer *rb_proc) ;
VALUE rwnck_application_xid(VALUE self);
VALUE rwnck_application_name(VALUE self);
VALUE rwnck_application_icon_name(VALUE self);
VALUE rwnck_application_pid(VALUE self);
VALUE rwnck_application_icon_is_fallback_p(VALUE self);
VALUE rwnck_application_startup_id(VALUE self);
VALUE rwnck_application_n_windows(VALUE self);
void wnck_callback_application(WnckApplication *application0, gpointer *rb_proc) ;
